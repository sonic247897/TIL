#컬럼의 이름을 변경 - dplyr(display rename?)
install.packages("dplyr")
library("dplyr")
#컬럼의 이름을 변경 - dplyr(display rename?)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
#컬럼의 이름을 변경 - dplyr(display rename?)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
library("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
exam
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 변경
class(mpg)
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg = data.frame(mpg)
dfmpg
dfmpg
install.packages("ggplot2")
install.packages("ggplot2")
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg = data.frame(mpg)
dfmpg
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg = data.frame(data = mpg)
dfmpg
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mydata <- c("java","spring","bigdata","android")
qplot(mydata)
qplot(data = mpg, x=hwy) #샘플데이터
qplot(data = mpg, x=hwy) #샘플데이터
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
qplot(data = mpg, x=hwy) #샘플데이터
qplot(data = mpg, x=hwy) #샘플데이터
qplot(data = mpg, x=hwy, y= drv)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
qplot(data = mpg, x=hwy) #샘플데이터
library("ggplot2")
qplot(data = mpg, x=hwy) #샘플데이터
qplot(data = mpg, x=hwy, y= drv)
qplot(data = mpg, x=drv, y= hwy, geom = "line")
qplot(data = mpg, x=drv, y= hwy, geom = "boxplot")
View(mpg)
View(mpg)
install.packages("ggplot2")
library("ggplot2")
mydata <- c("java","spring","bigdata","android")
qplot(mydata)
qplot(data = mpg, x=hwy) #샘플데이터
qplot(data = mpg, x=hwy, y= drv)
qplot(data = mpg, x=drv, y= hwy, geom = "line")
qplot(data = mpg, x=drv, y= hwy, geom = "boxplot")
qplot(data = mpg, x=drv, y= hwy, geom = "boxplot", color=drv)
install.packages("ggplot2")
library("ggplot2")
library("ggplot2")
mydata <- c("java","spring","bigdata","android")
qplot(mydata)
qplot(data = mpg, x=hwy) #샘플데이터
qplot(data = mpg, x=hwy, y= drv)
qplot(data = mpg, x=drv, y= hwy, geom = "line")
qplot(data = mpg, x=hwy) #샘플데이터
qplot(mydata)
qplot(data = mpg, x=hwy) #샘플데이터
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg = data.frame(mpg)
dfmpg
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg <- data.frame(mpg)
dfmpg
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg <- data.frame(ggplot2::mpg)
dfmpg
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
mpg <- as.data.frame(mpg)
nrow(mpg)
library("ggplot2")
mpg <- as.data.frame(mpg)
nrow(mpg)
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mpg <- as.data.frame(mpg)
nrow(mpg)
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
qplot(data = mpg, x=hwy) #샘플데이터
mpg <- as.data.frame(mpg)
nrow(mpg)
mpg <- as.data.frame(mpg)
nrow(mpg)
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg <- as.data.frame(ggplot2::mpg)
dfmpg
nrow(dfmpg)
#### step2. mpg의 정보를 출력 ####
# 행 개수, 열 개수, 위에서 10개, 끝에서 10개 출력
nrow(dfmpg)
ncol(dfmpg)
head(dfmpg)
tail(dfmpg)
head(dfmpg, 10)
tail(dfmpg, 10)
View(mpg)
View(mpg)
View(mpg)
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mpg <- as.data.frame(mpg)
nrow(mpg)
library("dplyr")
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway (고속도로 연비)
rename(dfmpg, city=cty, highway=hwy)
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway (고속도로 연비)
rename(dfmpg, city=cty, highway=hwy)
#ggplot2패키지에서 제공되는 mpg데이터를 분석
#### step1. mpg를 dataframe으로 ####
dfmpg <- as.data.frame(ggplot2::mpg)
#### step2. mpg의 정보를 출력 ####
# 행 개수, 열 개수, 위에서 10개, 끝에서 10개 출력
nrow(dfmpg)
ncol(dfmpg)
head(dfmpg, 10)
tail(dfmpg, 10)
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway (고속도로 연비)
rename(dfmpg, city=cty, highway=hwy)
head(dfmpg)
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway (고속도로 연비)
rename(dfmpg, city=cty, highway=hwy)
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway (고속도로 연비)
dfmpgrename(dfmpg, city=cty, highway=hwy)
#### step3. mpg의 컬럼명을 변경 ####
# cty => city, hwy => highway (고속도로 연비)
dfmpg <- rename(dfmpg, city=cty, highway=hwy)
head(dfmpg)
#### step4. 파생변수 생성하기 ####
# total컬럼을 추가 => cty와 hwy의 합
# avg컬럼을 추가 => cty와 hwy의 평균
dfmpg$total <- dfmpg$city+dfmpg$highway
dfmpg$avg <- dfmpg$total/2
head(dfmpg)
#### step5. 생성된 total을 가지고 요약정보 확인 ####
summary(total)
#### step5. 생성된 total을 가지고 요약정보 확인 ####
summary(dfmpg)
#### step5. 생성된 total을 가지고 요약정보 확인 ####
summary(dfmpg$total)
sample(1:10)
a<-sample(1:10)
a
a<-sample(1:10)
a
a<-sample(1:10)
a
a<-sample(1:10, size = 5)
a
a<-sample(1:10, size = 5)
a
a<-sample(1:10, size = 5)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 3, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE) #replace=TRUE이면 중복x
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE) #replace=TRUE이면 중복x
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE) #replace=TRUE이면 중복x
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE) #replace=TRUE이면 중복
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE) #replace=TRUE이면 중복
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE) #replace=TRUE이면 중복
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 방금 랜덤수 값을 발생시켰던 것을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 방금 랜덤수 값을 발생시켰던 것을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
a<-sample(1:10, size = 5, replace = FALSE)
a
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수 값을 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수 값을 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(121) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(121) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트 완료
for(i in 1:nrow(ifdf)){
#컬럼명을 index로 줄 수 있다
if(ifdf[i,"myval"]=="spring" ){
#새로 만들어지는 컬럼명
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
# 2. 함수를 이용해서 작업 - info2
# 없으면 새로 만든다
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring", yes = "쉽다", no= "할꺼다")
ifdf
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata", "android"),
size = 6,
replace = TRUE))
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata", "android"),
size = 6,
replace = TRUE))
ifdf
for(i in 1:nrow(ifdf)){
#컬럼명을 index로 줄 수 있다
if(ifdf[i,"myval"]=="spring" ){
#새로 만들어지는 컬럼명
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
# 2. 함수를 이용해서 작업 - info2
# 없으면 새로 만든다
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring", yes = "쉽다", no= "할꺼다")
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata", "android"),
size = 6,
replace = TRUE))
ifdf
# 1. 오버헤드가 많고 속도가 느린 방법!
#myval의 값이 spring이면 프로젝트 완료
for(i in 1:nrow(ifdf)){
#컬럼명을 index로 줄 수 있다
if(ifdf[i,"myval"]=="spring" ){
#새로 만들어지는 컬럼명
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
# 2. 함수를 이용해서 작업 - info2
# 없으면 새로 만든다
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring", yes = "쉽다", no= "할꺼다")
ifdf
# 3. 조건이 두 개 이상인 경우 처리 - info3
ifdf[,"info3"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no= ifelse(test=ifdf$myval=="bigdata",
yes = "머신셋팅",
no = "device셋팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 20이상이면 pass, fail
dfmpg
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 20이상이면 pass, fail
dfmpg[,"info"] <- ifelse(test= dfmpg$total>=20, yes ="pass", no="fail")
dfmpg
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 20이상이면 pass, fail
dfmpg[,"info"] <- ifelse(test= dfmpg$total>=30, yes ="pass", no="fail")
dfmpg
#### step7. grade컬럼 추가 ####
# total값을 이용해서 평가 - 40이상이면 A, 35이상 B, 30이상 C, 나머지 D
dfmpg[,"grade"] <- ifelse(test=dfmpg$total>=40, yes = "A",
no= ifelse(test=dfmpg$total>=35, yes="B",
no= ifelse(test=dfmpg$total>=30, yes="C", no="D")))
dfmpg
dfmpg
table(exam$eng)
exam <- read.csv("csv_exam.csv")
exam
#전체 레코드의 맨 위에서부터 정의한 개수만큼 가져오기
head(exam, n = 5) # 5개만 가져오기
tail(exam, 5) #아래쪽부터 가져오기. 변수명은 생략해도 된다.
#실제 뷰어로 보기
View(exam)
#행의 개수
nrow(exam)
#컬럼의 개수
ncol(exam)
#행과 열의 개수
dim(exam)
#타입 확인
class(exam) #dataframe
#구조 확인
str(exam)
#데이터에 대한 요약정보 - 최소값, 최대값, 평균, 중간값, 4분위 수의 1,3번째
summary(exam)
exam
#컬럼의 이름을 변경 - dplyr(display rename?)
install.packages("dplyr")
library("dplyr")
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
table(exam$eng)
table(exam$eng)
library("ggplot2")
qplot(exam$eng)
library("ggplot2")
dfmidwest <- as.data.frame(midwest)
nrodfmidwest
nrow(dfmidwest)
dfmidwest
library("dplyr")
head(dfmidwest)
rename(dfmidwest, total=poptotal, asian=popasian)
head(dfmidwest)
rename(dfmidwest, total=poptotal, asian=popasian)
head(dfmidwest)
dfmidwest <- rename(dfmidwest, total=poptotal, asian=popasian)
head(dfmidwest)
dfmidwest$asianPercent <- (dfmidwest$asian/dfmidwest$total)*100
head(dfmidwest)
qpot(data=dfmidwest, x =county, y= asianPercent, geom="line")
qplot(data=dfmidwest, x =county, y= asianPercent, geom="line")
qplot(data=dfmidwest, x =county, y= asianPercent)
qplot(data=dfmidwest, x =county, y= asianPercent, geom = "boxplot")
qplot(data=dfmidwest, x =county, y= asianPercent, geom = "line")
asianPct_avg = mean(dfmidwest$asianPercent)
dfmidwest$overAvg <- ifelse(test = dfmidwest$asianPct_avg, yes="large", no="small")
dfmidwest[,"overAvg"] <- ifelse(test = dfmidwest$asianPct_avg > asianPct_avg, yes="large", no="small")
dfmidwest
asianPct_avg
asianPct_avg <- mean(dfmidwest$asianPercent)
asianPct_avg
dfmidwest[,"overAvg"] <- ifelse(test = dfmidwest$asianPercent > asianPct_avg, yes="large", no="small")
dfmidwest
table(dfmidwest)
table(dfmidwest$overAvg)
qplot(dfmidwest$overAvg)
source('C:/iot/work/Rwork/advanced/midwest_exam.R')
