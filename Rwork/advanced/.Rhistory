#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE) #replace=TRUE이면 중복
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = TRUE)
a
#랜덤값을 만들어낼 때 사용
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 방금 랜덤수 값을 발생시켰던 것을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 방금 랜덤수 값을 발생시켰던 것을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
a<-sample(1:10, size = 5, replace = FALSE)
a
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수 값을 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수 값을 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(121) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(121) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
#랜덤값을 만들어낼 때 사용
set.seed(1222) #1222는 랜덤수를 발생시켰던 곳을 찾아갈 수 있는 key값
a<-sample(1:10, size = 5, replace = FALSE)
a
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트 완료
for(i in 1:nrow(ifdf)){
#컬럼명을 index로 줄 수 있다
if(ifdf[i,"myval"]=="spring" ){
#새로 만들어지는 컬럼명
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
# 2. 함수를 이용해서 작업 - info2
# 없으면 새로 만든다
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring", yes = "쉽다", no= "할꺼다")
ifdf
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata", "android"),
size = 6,
replace = TRUE))
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata", "android"),
size = 6,
replace = TRUE))
ifdf
for(i in 1:nrow(ifdf)){
#컬럼명을 index로 줄 수 있다
if(ifdf[i,"myval"]=="spring" ){
#새로 만들어지는 컬럼명
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
# 2. 함수를 이용해서 작업 - info2
# 없으면 새로 만든다
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring", yes = "쉽다", no= "할꺼다")
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata", "android"),
size = 6,
replace = TRUE))
ifdf
# 1. 오버헤드가 많고 속도가 느린 방법!
#myval의 값이 spring이면 프로젝트 완료
for(i in 1:nrow(ifdf)){
#컬럼명을 index로 줄 수 있다
if(ifdf[i,"myval"]=="spring" ){
#새로 만들어지는 컬럼명
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
# 2. 함수를 이용해서 작업 - info2
# 없으면 새로 만든다
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring", yes = "쉽다", no= "할꺼다")
ifdf
# 3. 조건이 두 개 이상인 경우 처리 - info3
ifdf[,"info3"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no= ifelse(test=ifdf$myval=="bigdata",
yes = "머신셋팅",
no = "device셋팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 20이상이면 pass, fail
dfmpg
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 20이상이면 pass, fail
dfmpg[,"info"] <- ifelse(test= dfmpg$total>=20, yes ="pass", no="fail")
dfmpg
#### step6. info컬럼 추가 ####
# total값을 이용해서 평가 - 20이상이면 pass, fail
dfmpg[,"info"] <- ifelse(test= dfmpg$total>=30, yes ="pass", no="fail")
dfmpg
#### step7. grade컬럼 추가 ####
# total값을 이용해서 평가 - 40이상이면 A, 35이상 B, 30이상 C, 나머지 D
dfmpg[,"grade"] <- ifelse(test=dfmpg$total>=40, yes = "A",
no= ifelse(test=dfmpg$total>=35, yes="B",
no= ifelse(test=dfmpg$total>=30, yes="C", no="D")))
dfmpg
dfmpg
table(exam$eng)
exam <- read.csv("csv_exam.csv")
exam
#전체 레코드의 맨 위에서부터 정의한 개수만큼 가져오기
head(exam, n = 5) # 5개만 가져오기
tail(exam, 5) #아래쪽부터 가져오기. 변수명은 생략해도 된다.
#실제 뷰어로 보기
View(exam)
#행의 개수
nrow(exam)
#컬럼의 개수
ncol(exam)
#행과 열의 개수
dim(exam)
#타입 확인
class(exam) #dataframe
#구조 확인
str(exam)
#데이터에 대한 요약정보 - 최소값, 최대값, 평균, 중간값, 4분위 수의 1,3번째
summary(exam)
exam
#컬럼의 이름을 변경 - dplyr(display rename?)
install.packages("dplyr")
library("dplyr")
#rename(data, 변경할 컬럼명=기존컬럼명)
exam <- rename(exam, eng=english)
exam
table(exam$eng)
table(exam$eng)
library("ggplot2")
qplot(exam$eng)
library("ggplot2")
dfmidwest <- as.data.frame(midwest)
nrodfmidwest
nrow(dfmidwest)
dfmidwest
library("dplyr")
head(dfmidwest)
rename(dfmidwest, total=poptotal, asian=popasian)
head(dfmidwest)
rename(dfmidwest, total=poptotal, asian=popasian)
head(dfmidwest)
dfmidwest <- rename(dfmidwest, total=poptotal, asian=popasian)
head(dfmidwest)
dfmidwest$asianPercent <- (dfmidwest$asian/dfmidwest$total)*100
head(dfmidwest)
qpot(data=dfmidwest, x =county, y= asianPercent, geom="line")
qplot(data=dfmidwest, x =county, y= asianPercent, geom="line")
qplot(data=dfmidwest, x =county, y= asianPercent)
qplot(data=dfmidwest, x =county, y= asianPercent, geom = "boxplot")
qplot(data=dfmidwest, x =county, y= asianPercent, geom = "line")
asianPct_avg = mean(dfmidwest$asianPercent)
dfmidwest$overAvg <- ifelse(test = dfmidwest$asianPct_avg, yes="large", no="small")
dfmidwest[,"overAvg"] <- ifelse(test = dfmidwest$asianPct_avg > asianPct_avg, yes="large", no="small")
dfmidwest
asianPct_avg
asianPct_avg <- mean(dfmidwest$asianPercent)
asianPct_avg
dfmidwest[,"overAvg"] <- ifelse(test = dfmidwest$asianPercent > asianPct_avg, yes="large", no="small")
dfmidwest
table(dfmidwest)
table(dfmidwest$overAvg)
qplot(dfmidwest$overAvg)
source('C:/iot/work/Rwork/advanced/midwest_exam.R')
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 = 10
class(num1)
num2 = 10L
class(num2)
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 <- 10
class(num1) #numeric: 기본 R의 숫자 타입
num2 <- 10L
class(num2) #integer
result <- num1+num2
result
class(result)
data(MASS) #data: R 내부의 샘플데이터 셋을 가져오는 함수
? MASS
data(package="MASS") #data: R 내부의 샘플데이터 셋을 가져오는 함수
# MASS 라이브러리에 있는 data set목록 출력
library(MASS)
data("Boston")
haed(Boston)
head(Boston)
colnames(Boston)
t(colnames(Boston))
t(t(colnames(Boston)))
df <- head(Boston[,1:7]) # 1~7번 컬럼에 해당하는 모든 데이터 보기
df
# 반복작업을 할 때 사용할 수 있도록 함수를 지원
# margin=1 -> 행방향으로 반복계산, 2: 열방향으로 반복계산
df[,"total"] <- apply(x = df, MARGIN = 1, FUN="sum") #x:데이터 프레임
# 반복작업을 할 때 사용할 수 있도록 함수를 지원
# margin=1 -> 행방향으로 반복계산, 2: 열방향으로 반복계산
df[,"total"] <- apply(X = df, MARGIN = 1, FUN="sum") #x:데이터 프레임
df
df[,"avg"] <- apply(X = df, MARGIN = 1, FUN="mean")
df
apply(X = df, MARGIN = 2, FUN="sum")
apply(X = df, MARGIN = 2, FUN="mean")
df
#소수점 4째자리까지만 출력
round(apply(X = df, MARGIN = 2, FUN="sum"), 4)
round(apply(X = df, MARGIN = 2, FUN="mean"), 4)
# 반복작업을 할 때 사용할 수 있도록 함수를 지원
# (R에서는 paging처리 되어있는 웹사이트를 크롤링할 때 정도만 for문을 사용하고 나머지는 함수를 사용해서 계산한다)
# margin=1 -> 행방향으로 반복계산, 2: 열방향으로 반복계산
df[,"total"] <- apply(X = df, MARGIN = 1, FUN="sum") # X:데이터 프레임
#apply의 margin속성을 2로 정의한 것과 같다
sapply(X = dfs, FUN = "mean")
#apply의 margin속성을 2로 정의한 것과 같다
sapply(X = df, FUN = "mean")
sapply(X = df, FUN = "class")
t(t(sapply(X = df, FUN = "class"))) #각 컬럼의 타입 확인
#주어진 데이터에서 원하는 데이터만 추출
library("dplyr")
data("airquality")
head("airquality")
head(airquality)
df2 <- airquality
df2
# 필터링 - 벡터연산
head(df2[,1:4])
df2_data1 <- df2[1:5, ]
df2_data1
df2[df2$Day==1,]
df2[,df2$Day==1] #조건을 만족하는 행만 보겠다(열은 전부 봄)
df2[df2$Day==1,] #조건을 만족하는 행만 보겠다(열은 전부 봄)
df2$Day==1
df2[df2$Day<=2,]
df2[df2$Day==1 & df2$Day==2, ]
df2[df2$Day==1 | df2$Day==2, ]
df2$Day %in% 1:2 #oracle의 in연산자와 비슷
sum(df2$Day %in% 1:2) #oracle의 in연산자와 비슷 - day가 1이거나 2이거나
df2_data2 <- df2[df2$Day %in% 1:2, ]
nrow(df2_data2)
# dplyr패키지에서 지원하는 필터 관련 함수
filter(df2, Day==1 & Month==5) #자동완성 지원x
filter(df2, Day==1 %in% c(1,3,5))
library("dplyr")
exam <- read.csv("csv_exam.csv")
exam
exam %>% filter(class==1)
# chaining결과를 grouping할 때 문제가 발생할 수 있다.
# 원래 R에서는 <-로 변수에 할당하고 변수를 찍어야 결과가 나오는데
# 체이닝 오퍼레이터 때문에 그냥 출력된다.
exam %>%
filter(class==1) %>%  # ctrl+shift+m 단축키
filter(math >= 50)
#select - 오라클에서의 select와 비슷
exam %>% select(-math) # math컬럼 제외
source('C:/iot/work/Rwork/advanced/filter_test_2.R', encoding = 'UTF-8')
# arrange
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>% select(id, math, eng)
exam %>% select(id, math, english)
exam %>%
filter(class==1)
exam %>%
filter(class==1) %>%
select(id, math, science)
exam %>% arrange(class)
exam %>% arrange(class, english)
exam %>% arrange(class, desc(english)) #class로 먼저 정렬하고,
# mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
# 파생변수 만드는 방법 중 가장 빠른 방법[데이터가 많을 때 사용]
exam %>% mutate(total=math+eng+science)
# mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
# 파생변수 만드는 방법 중 가장 빠른 방법[데이터가 많을 때 사용]
exam %>% mutate(total=math+english+science)
# mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
# 파생변수 만드는 방법 중 가장 빠른 방법[데이터가 많을 때 사용]
exam %>%
mutate(total=math+english+science) %>%
head()
# mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
# 파생변수 만드는 방법 중 가장 빠른 방법[데이터가 많을 때 사용]
exam %>%
mutate(total=math+english+science,
mean = total/3) %>%
head()
# mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
# 파생변수 만드는 방법 중 가장 빠른 방법[데이터가 많을 때 사용]
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70), "통과", "재시험"))
# mutate - 파생변수 추가하기(원본에 없는 컬럼 추가)
# 파생변수 만드는 방법 중 가장 빠른 방법[데이터가 많을 때 사용]
exam %>%
mutate(total=math+english+science,
mean = total/3,
info = ifelse(science>=70, "통과", "재시험"))
exam
exam %>%
group_by(class)
# group으로 묶고 난 후에 연산
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())# 내부적으로 class끼리 묶음
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu = c(77,56,99,100,99))
test1
test2
final_data
# 조인
final_data <- left_join(test1, test2, by="id") # 열방향으로 조인(조인key 명시)
final_data
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"))
str(namedata)
str(namedata)
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"),
stringsAsFactors = F) #
str(namedata)
#문자열을 지정하면 factor타입으로 지정되어서 5레벨로 뜬다. (순위)
str(namedata)
exam_new <- left_join(exam, namedata, by="class")
source('C:/iot/work/Rwork/advanced/filter_test_3.R', encoding = 'UTF-8', echo=TRUE)
#오전시험, 오후시험
# - 매일 크로링한 데이터를 파일로 저장할 때
groupA <- data.frame(id=c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu = c(77,56,99,100,99))
group_total <- bind_rows(groupA, groupB)
group_total
library("ggplot2")
nrow(mpg)
library("dplyr")
mpg %>% group_by("class")
mpg %>% group_by("class") %>%
summarise(mean(cty))
mpg %>% group_by("class") %>%
summarise(mean(cty))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty))
mpg %>% group_by(class) %>%
summarise(desc(cty_avg = mean(cty)))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(mean(cty)))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(mean(cty)))
mpg %>% group_by(class) %>%
arrange(desc(cty_avg)
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg)) %>%
head(3)
mpg %>% group_by(class) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
colnames(mpg)
mpg %>% group_by(manufacturer) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
mpg %>% group_by(manufacturer) %>%
summarise(compact_num = num(model=="compact")) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
summarise(compact_num = sum(model=="compact")) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(model=="compact") %>%
summarise(compact_num = sum()) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(model=="compact") %>%
summarise(compact_num = sum()) %>%
arrange(desc(compact_num))
mpg
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = sum()) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = sum(model)) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = sum("model")) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = sum("model")) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = sum("compact")) %>%
arrange(desc(compact_num))
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = n()) %>%
arrange(desc(compact_num))
library("ggplot2")
library("dplyr")
nrow(mpg)
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg))
mpg %>% group_by(manufacturer) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
colnames(mpg)
mpg
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = n()) %>%
arrange(desc(compact_num))
library("ggplot2")
library("dplyr")
nrow(mpg)
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty))
mpg %>% group_by(class) %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg))
mpg %>% group_by(manufacturer) %>%
summarise(hwy_avg = mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(3)
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarise(compact_num = n()) %>%
arrange(desc(compact_num))
