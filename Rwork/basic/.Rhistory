m1
#
m1 <- matrix(c(80, 90, 70, 100, 80, 99, 78, 72, 90, 78, 82, 78, 99, 89, 78, 90 ), ncol = 3, byrow = T)
#
m1 <- matrix(c(80, 90, 70, 100, 80, 99, 78, 72, 90, 78, 82, 78, 99, 89, 78, 90 ), nrow=4, ncol = 4, byrow = T)
m1
source('C:/iot/work/Rwork/matrix.R', encoding = 'UTF-8')
myjumsuMat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90), nrow=4)
myjumsuMat
myjumsuMat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90), nrow=4, byrow = T)
myjumsuMat
rowna
colnames(myjumsuMat) <-c("국어","영어","과학","수학")
rownames(myjumsuMat) <-c("kim","lee","hong","jang")
myjumsuMat
avg_name <- c(mean(myjumsuMat[1,]),mean(myjumsuMat[2,]),mean(myjumsuMat[3,]),mean(myjumsuMat[4,]))
avg_name <- c(mean(myjumsuMat[1,]),mean(myjumsuMat[2,]),mean(myjumsuMat[3,]),mean(myjumsuMat[4,]))
avg_subject <- c(mean(myjumsuMat[,1]),mean(myjumsuMat[,2]),mean(myjumsuMat[,3]),mean(myjumsuMat[,4]))
avg_name
avg_subject
dataframeMat1 <- matrix(1:15, ncol = 3, byrow = T)
dataframeMat1
dataframeMat2
dataframeMat2
# matrix에서 dataframe으로 바꾼다
dataframeMat2 <- data.frame()
dataframeMat2
# matrix에서 dataframe으로 바꾼다
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
# matrix에서 dataframe으로 바꾼다
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframe[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
as.character(dataframeMat1[,1])
dataframeMat1
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
#matrix는 한 타입으로만 선언해야 하므로 한 열의 타입을 변경해도 모든 데이터의 타입이 변경된다.
dataframeMat1[,1] <- as.character(dataframeMat1[,1])
dataframeMat1
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
mydataframe[,1] <- as.character(mydataframe[,1])
str(mydataframe)
mydataframe
mydataframe$X2
mydataframe$X3
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다.
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$x4 <- col4
mydataframe
#dataframe에 열을 추가
col4 <- c(1,2,3)
mydataframe$x4 <- col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(mydataframe)
dataframeMat2
#dataframe 만들기 - 1. matrix를 dataframe으로 변환
#                   2. 벡터를 여러개 만들어서 dataframe을 작성
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydf1
mean(mydf1$eng)
mean(mydf1$math)
# 3. dataframe을 직접 정의
mydf2
# 3. dataframe을 직접 정의
mydf2 <- data.frame(eng=c(100,100,100),
m = c(90,90,90)) #매개변수에 바로 넣어서 생성
mydf2
mydf1
# 3. dataframe을 직접 정의
mydf2 <- data.frame(eng=c(100,100,100),
math = c(90,90,90)) #매개변수에 바로 넣어서 생성
mydf2
#
m <- matrix(1:15, ncol = 3, byrow = T)
#byrow는 생성될 때 준 옵션
m <- matrix(1:15, ncol = 3, byrow = T)
m
d <- data.frame(m)
d
t(m)
m
d <- data.frame(m)
d
t(m)
#생성이 완료되어 사용중인 matrix, dataframe의 행과 열을 변경
m <- matrix(1:15, ncol = 3, byrow = T)
m
m <- t(m) #transform
m
d <- data.frame(m)
d
d <- t(d)
d
##실습 p.88
a <- c("사과",1800,24)
b <- c("딸기",1500,38)
c <- c("수박",3000,13)
df1 <- data.frame(a,b,c)
df1
##실습 p.88
제품 <- c("사과","딸기","수박")
가격 <- c(1800,1500,3000)
판매량 <- c(24,38,13)
df1 <- data.frame(제품,가격,판매량)
df1
fruit_avg =mean(df1$가격)
sales_avg = mean(df1$판매량)
fruit_avg <- mean(df1$가격)
sales_avg <- mean(df1$판매량)
fruit_avg
sales_avg
df1
price_avg <- mean(df1$가격)
price_avg
num <- 88
}
}
num <- 88
if(num >= 90){
print("합격")
}else{
print("다시")
}
if(num >= 90){
print("수")
}else if(num >= 80){
print("우")
}else{
print("다시")
}
myv <- c(1:10)
#java의 향상된 for문처럼 동작
for (i in myv) {
i
}
myv <- c(1:10)
#java의 향상된 for문처럼 동작
for (i in myv) {
print(i)
}
source('C:/iot/work/Rwork/for.R', encoding = 'UTF-8', echo=TRUE)
myv <- c(1:10)
#java의 향상된 for문처럼 동작
for (i in myv) {
print(i)
}
arr <- c(1:10)
sum = 0
for(i in arr){
sum = sum + i
}
sum
arr <- c(1:10)
sum <- 0
for(i in arr){
sum <- sum + i
}
sum
sum <- 0
for(i in myv){
sum <- sum + i
}
sum
print(sum)
#1부터 10까지 합구하기 - ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본 패키지로 사용 가능(다시 로딩할 필요x)
#csv를 읽기기
mdf = read.csv("csv_exam.csv")
mdf
#csv는 기본 패키지로 사용 가능(다시 로딩할 필요x)
#csv를 읽기기
mdf <- read.csv("csv_exam.csv")
mdf
mdf[2,2]
mdf[2,]
m
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20, ncol = 4) #matrix로 작업하는 것이 가장 편함
m
d <- data.frame(m)
d
myresult <- d[d$X3>=13,]
myresult
myresult
#조건에 만족하는 데이터를 result.csv로 저장
write.csv(myresult, file = "result.csv")
source('C:/iot/work/Rwork/csv_test.R', encoding = 'UTF-8')
##미션
csvMat <- read.csv("csv_exam.csv")
csvMat
csvMat2 <- csvMat[d$science]
csvMat2
##미션
csvDf <- read.csv("csv_exam.csv")
csvDf
csvDf2 <- csvMat[d$science>=80,]
csvDf2
csvDf2 <- csvMat[csvDf$science>=80,]
csvDf2
mytotal <- sum(c(csvDf2$math, csvDf2$english, csvDf2$science))
myavg <- mean(c(csvDf2$math, csvDf2$english, csvDf2$science))
mytotal
myavg
length(csvDf2[,1])
for (i in 1:size) {
csvDf2[i,]
}
for (i in 1:length(csvDf2[,1])) {
csvDf2[i,]
}
length(csvDf2[,1])
mytotal <- vector()
myavg <- vector()
size = c(1:length(csvDf2[,1]))
for (i in 1:length(csvDf2[,1])) {
for(j in 3:5){
mytotal[i] = mytotal[i] + csvDf2[i,j]
}
}
size = c(1:length(csvDf2[,1]))
for (i in 1:length(csvDf2[,1])) {
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
mytotal[i]
}
myavg[i] <- mytotal[i]/3
myavg[i]
}
mytotal <- vector()
myavg <- vector()
for (i in 1:length(csvDf2[,1])) {
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
mytotal[i]
}
myavg[i] <- mytotal[i]/3
myavg[i]
}
for (i in 1:length(csvDf2[,1])) {
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
(csvDf2[,1])
length(csvDf2[,1])
idx = (csvDf2[,1])
idx
for (i in idx) {
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
for (i in idx) {
i
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
csvDf2 <- csvMat[csvDf$science>=80,]
csvDf2
mytotal <- vector()
myavg <- vector()
idx = (csvDf2[,1])
idx
for (i in idx) {
i
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
col_total <- c(1,1,1,1,1)
csvDf2 <- csvMat[csvDf$science>=80,]
csvDf2 <- as.matrix(csvDf2)
csvDf2
##미션
csvDf <- read.csv("csv_exam.csv")
csvDf
csvDf2 <- csvMat[csvDf$science>=80,]
csvDfMat <- as.matrix(csvDf2)
csvDfMAt
csvDfMat
mytotal <- vector()
myavg <- vector()
idx = (csvDf2[,1])
idx
for (i in idx) {
i
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
idx = length(csvDf2[,1])
idx
idx = 1:length(csvDf2[,1])
idx
for (i in idx) {
i
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
for (i in idx) {
print(i)
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
csvDfMat <- as.matrix(csvDf2)
csvDfMat
for (i in idx) {
print(i)
for(j in 3:5){
print(csvDfMat[i,j])
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
mytotal <- c(0,0,0)
myavg <- c(0,0,0)
#matrix로 변환해서 작업!!!
idx = 1:length(csvDf2[,1])
idx
for (i in idx) {
print(i)
for(j in 3:5){
print(csvDfMat[i,j])
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
idx = 1:length(csvDf2[,1])
idx
mytotal <- 1:idx
myavg <- 1:idx
#matrix로 변환해서 작업!!!
for (i in idx) {
print(i)
for(j in 3:5){
print(csvDfMat[i,j])
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
mytotal
mytotal
mytotal <- 1:length(csvDf2[,1])
mytotal
myavg <- 1:length(csvDf2[,1])
mytotal <- 1:size
mytotal
mytotal <- 1:size
size <- length(csvDf2[,1])
size
size <- length(csvDf2[,1])
size
mytotal <- 1:size
mytotal
myavg <- 1:size
idx = 1:size
idx
for (i in idx) {
print(i)
for(j in 3:5){
print(csvDfMat[i,j])
mytotal[i] <- mytotal[i] + csvDfMat[i,j]
print(mytotal[i])
}
myavg[i] <- mytotal[i]/3
print(myavg[i])
}
csvDfMat
csvDfMat$x6 <- mytotal
csvDfMat$x7 <- myavg
csvDfMat
csvDfMat <- as.matrix(csvDf2)
csvDfMat
csvDf <- read.csv("csv_exam.csv")
csvDf
csvDf2 <- csvMat[csvDf$science>=80,]
size <- length(csvDf2[,1])
size
mytotal <- 1:size
mytotal
myavg <- 1:size
idx = 1:size
idx
for (i in idx) {
print(i)
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
}
myavg[i] <- mytotal[i]/3
}
csvDf2
csvDf2$x6 <- mytotal
csvDf2$x7 <- myavg
csvDf2
mydataframe
csvDf2$x6 <- mytotal
colnames(x = 6, mytotal)
csvDf2$x7 <- myavg
colnames(x= 7, myavg)
csvDf2
colnames(x6, mytotal)
colnames(csvDf2$x6) <- mytotal
colnames(csvDf2$x6) <- "mytotal"
names(csvDf2)[6] <- c("mytotal")
csvDf2$x6 <- mytotal
names(csvDf2)[6] <- c("mytotal")
csvDf2$x7 <- myavg
names(csvDf2)[7] <- c("myavg")
csvDf2
names(csvDf2)[7] <- c("mytotal")
csvDf2$x7 <- myavg
names(csvDf2)[8] <- c("myavg")
csvDf2
csvDf2 <- csvMat[csvDf$science>=80,]
size <- length(csvDf2[,1])
size
mytotal <- 1:size
mytotal
myavg <- 1:size
idx = 1:size
idx
for (i in idx) {
print(i)
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
}
myavg[i] <- mytotal[i]/3
}
csvDf2$x6 <- mytotal
names(csvDf2)[7] <- c("mytotal")
csvDf2$x7 <- myavg
names(csvDf2)[8] <- c("myavg")
csvDf2
csvDf2
csvDf2
<- csvMat[csvDf$science>=80,]
size <- length(csvDf2[,1])
size
mytotal <- 1:size
mytotal
myavg <- 1:size
idx = 1:size
idx
for (i in idx) {
print(i)
for(j in 3:5){
mytotal[i] <- mytotal[i] + csvDf2[i,j]
}
myavg[i] <- mytotal[i]/3
}
csvDf2$x6 <- mytotal
names(csvDf2)[6] <- c("mytotal")
csvDf2$x7 <- myavg
names(csvDf2)[7] <- c("myavg")
csvDf2
write.csv(csvDf2,file="csv_exam_result.csv")
mydata
mydata <- read.csv("csv_exam.csv")
mydata
mydataResult <- mydata[mydata$science>=80,]
mydataResult
mydataResult[,c(3:5)]
mydataResult$mytotal <- as.numeric(mydataResult$math+mydataResult$english+mydataResult$science)
mydataResult
mydataResult$myavg <- as.numeric(mydataResult$mytotal/3)
mydataResult
mydataResult
write.csv(mydataResult, file="result2.csv")
